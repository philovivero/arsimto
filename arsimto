#!/usr/bin/perl
# vim: set noexpandtab:
# --
# A recent battle with vim and a Go program finally settled this for me.
# Tabs for indent, spaces for formatting. If you change your shiftwidth and
# tabstop to different values and your code looks ugly, say aloud: tabs
# for indent, spaces for formatting.
# --
# arsimto is a radically-simple inventory management tool.
# license: gpl v2.
# author: Tim Ellis, CTO Fifth Sigma, Inc.

use strict;
use warnings;

# things passed in via arguments
my @extraArgs;
my $mode = 0;
my $verbose = 0;
my $assetList = '';
my $dataList = '';
my $collectURI = 0;
my $longMode = 0;
my $outputMode = 'ascii';
my $rootDir = '';
my $edgeNodeMode = 0;
my $recurseLevel = 1;

# colour-based variables
my $colourisedOutput = 0;
my $colourPalette = '0,36,32,35,34';
my $regularColour = "";
my $poolColour = "";
my $assetColour = "";
my $dataColour = "";
my $summaryColour = "";

# list of posible command sections
my $cmdList = "add, ln, ls, mv, rename, rm, help";

# a constant meaning an entry is at the top of a tree
my $topLevel = '__TOP_LEVEL_NO_PARENT';
my $vennMode = 'union';
my $pristineMode = 0;

# for full Assets list, show unassigned ones at the end
my $unassignedAssets;

# if they want an rcfile, must be first arg
my $rcFile = $ENV{"HOME"} . "/.arsimtorc";
if ($ARGV && $ARGV[0] =~ /^-+r(cfile)*=(.+)$/) { $rcFile = $2; }

# no arguments passed in? short help.
unless (scalar @ARGV) {
	doArgs('short');
	exit 255;
}

# read in rcfile if it exists - it'll just be args
if (open (IFILE, "< $rcFile")) {
	my $inLine;
	while ($inLine = <IFILE>) {
		chomp ($inLine);
		# must put args from rcfile at start so options passed on the
		# commandline will override them
		if ($inLine =~ /^-+(\w+)/) {
			unshift (@ARGV, $inLine);
		}
	}
}

# parse input arguments. put anything unparsed onto @extraArgs
foreach my $arg (@ARGV) {
	if ($arg =~ /^-+h(elp)*$/)                  { doArgs('long'); exit 0; }
	elsif ($arg =~ /^-+a(ssets)*=(.+)$/)        { $assetList = $2; }
	elsif ($arg =~ /^-+c(ollect)*=(.+)$/)       { $collectURI = $2; }
	elsif ($arg =~ /^-+c(olor)*$/)              { $colourisedOutput = 1; }
	elsif ($arg =~ /^-+d(ata)*=(.+)$/)          { $dataList = $2; }
	elsif ($arg =~ /^-+e(dge)*/)                { $edgeNodeMode = 1; }
	elsif ($arg =~ /^-+i(nt)*/)                 { $vennMode = 'intersection'; $recurseLevel = 0; }
	elsif ($arg =~ /^-+j(son)*/)                { $outputMode = 'json'; }
	elsif ($arg =~ /^-+l(ong)*/)                { $longMode = 1; }
	elsif ($arg =~ /^-+p(alette)*=(.+)$/)       { $colourPalette = $2; $colourisedOutput = 1; }
	elsif ($arg =~ /^-+p(rist)*/)               { $pristineMode = 'pristine'; }
	elsif ($arg =~ /^-+R(ecurs)*=(\d+)$/)       { $recurseLevel = $2; }
	elsif ($arg =~ /^-+u(s)*$/)                 { doArgs('uses'); exit 0; }
	elsif ($arg =~ /^-+t(op)*=(.+)$/)           { $rootDir = $2; }
	elsif ($arg =~ /^-+v(erbose)*$/)            { $verbose = 1; }
	elsif ($cmdList =~ /\b$arg\b/)              { $mode = $arg; }
	else { push (@extraArgs, $arg); }
}

# if JSON output, override other things that would be silly
if ($outputMode eq 'json') {
	$colourisedOutput = 0;
	$longMode = 0;
}

# there can be problems with the input rootDir
if ($rootDir) {
	# rootDir must end with trailing /
	if ($rootDir !~ /\/$/) { $rootDir .= "/"; }

	# Perl failes with ~/dir directory specification so change to $HOME
	if ($rootDir =~ /^~/) { $rootDir =~ s/^~/$ENV{'HOME'}/; }
}

# names of directories
my $poolDir = $rootDir . "Pools";
my $assetDir = $rootDir . "Assets";

if ($verbose && $rootDir) { print STDERR " - Using poolDir=$poolDir and assetDir=$assetDir.\n"; }

# if they don't know what they're doing but tried something, help them
unless ($mode) {
	print STDERR "Commands: $cmdList. Use -h for long help or no arguments for short help.\n";
	exit 255;
}

# variables to support colourised output
if ($colourisedOutput) {
	# input should be comma-separated list of numerals
	my @cp = split (',', $colourPalette);
	# add ANSI colour commands around the values - final looks like ^[[32m
	for (my $i=0; $i < scalar @cp; $i++) {
		$cp[$i] = chr(27) . '[' . $cp[$i] . 'm';
	}
	($regularColour, $poolColour, $assetColour, $dataColour, $summaryColour) = @cp;
}

# regardless of anything previous, if they're not on a terminal, don't
# output colour codes
unless (-t STDOUT) { $colourisedOutput = 0; }

# determine the mode they're requesting and do the needful
if ($mode eq 'add') {
	addAssets();
} elsif ($mode eq 'ln') {
	lnAssets();
} elsif ($mode eq 'ls') {
	listAssets();
} elsif ($mode eq 'mv') {
	mvAssets();
} elsif ($mode eq 'rm') {
	rmAssets();
} elsif ($mode eq 'rename') {
	renameAssets();
} elsif ($mode eq 'help') {
	doArgs ('short');
}
exit 0;

# ----------------------------------------------------------------------------------------
# subroutines follow
# ----------------------------------------------------------------------------------------

# give help. either short and concise or long and verbose including a tutorial.
sub doArgs {
	my $helpLength = shift;

	if ($helpLength eq 'uses') {
		print "Real-World Uses of Arsimto\n";
		print "\n";
		print "Add a host to the pool with collection of info and DNS-NAME:\n";
		print q#  arsimto add ASSET.NAME --collect=[username@]ASSETIP -d=dnsname:ASSET.NAME.TLD# . "\n";
		print "\n";
		print "Copy a set of files to all servers in an intersection of pools:\n";
		print q#  arsimto ls -i POOL1 POOL2 -d=name,ip | awk '{print "echo "$1" ; scp -r ~/file1 ~/dir1 "$2":"}' | sh# . "\n";
		print "\n";
		print "Generate some DNS entries for all servers in an intersection of pools:\n";
		print q#  arsimto ls -i POOL1 POOL2 -d='name,"IN","CNAME",ip'# . "\n";
		print "\n";
		print "Change hostname on the hosts for a given pool. Assumes you've added assets with dnsname:DNS-NAME.\n";
		print q#  arsimto ls POOL1 -d=ip,dnsname | awk '{print "echo "$1" ; ssh "$1" \"sudo bash -c '\''sudo hostname "$2" && hostname > /etc/hostname'\''\""}' | sh# . "\n";
		print "\n";
		print "Some aliases you might want to define to list Pools:\n";
		print "  alias arl='arsimto ls -l '\n";
		print "  alias arll='arsimto ls -l -d=name '\n";
	} else {
		print "usage: $0 <command> [<assetObj>|<poolObj>] [<assetObj>|<poolObj>...]\n";
		print "  [-v|--verboase] [-h|--help] [-d=|--data=<dataList>] [-p|--pristine]\n";
		print "  [-c|--color] [-l|--long] [-p=|--palette=<p1,p2,p3,p4,p5>]\n";
		print "  [-r=|--rcfile=<rcFile>] [d=|--directory=<rootInventoryDir>]\n";
		print "\n";
		print "  <command> See below for list of commands.\n";
		print "  -c        Or --color, output in colorized mode.\n";
		print "  -d=...    Or --data=..., the list of data key:value entries to report on or add.\n";
		print "  -h        Or --help. Long version help. Run without arguments for short help.\n";
		print "  -i        Or --intersection. Output intersection of Pool Assets instead of union. Implies -R=0.\n";
		print "  -j        Or --json. Output JSON structures instead of ASCII art.\n";
		print "  -l        Or --long. Long output for Pools/ listing.\n";
		print "  -p        Or --pristine. Don't reformat data values to be more (human-)readable.\n";
		print "  -p=...    Or --palette=..., the colors to output. ANSI color codes. Default is $colourPalette.\n";
		print "  -r=...    Or --rcfile=..., read prefs from rcfile. Must be first argument. Default is $rcFile.\n";
		print "  -R=L      Or --recurse=L, recurse L levels into pool hierarchy. Default $recurseLevel. If -i, default is 0.\n";
		print "  -u        Or --uses Output some common patterns of usage for Arsimto.\n";
		print "  -t=...    Or --top=..., the top-level directory where Assets/ and Pools/ are stored.\n";
		print "  -v        Verbose/debugging output\n";
		print "  <command> is one of $cmdList.\n";
		print "\n";
		print "add :: \n";
		print "  $0 add <assetName> [<assetName>...]\n";
		print "    --data=n1:v1[,n2:v2,...,nN:vN] [--collect=[username@]<hostName>]\n";
		print "  Add asset into inventory. Data attributes are added to all assets listed.\n";
		print "  --collect=[username@]<hostName> SSHes to hostName to get basic data from the host.\n";
		if ($helpLength eq 'long') {
			print "Examples:\n";
			print "  $0 add dc01   --data=capacity:5000\n";
			print "  $0 add rack01   --data=U:48\n";
			print "  $0 add switch01 --data=ports:48\n";
			print "  $0 add server{10..25} --data=ram:16GB,disk:2048GB,nic:10Gb\n";
			print "  for i in {10..25} ; do $0 add server\$i --data=ip:192.168.1.1\$i ; done\n";
		}
		print "\n";
		print "ln :: \n";
		print "  $0 ln <Pool> <groupedObject> [<groupedObject>...]\n";
		print "  Logically pools Assets or Pools to each other. If <Pool> doesn't already exist,\n";
		print "  it is created.\n";
		if ($helpLength eq 'long') {
			print "Examples:\n";
			print "  $0 ln dc01 rack01\n";
			print "  $0 ln rack01 switch01 server{10..25}\n";
			print "  $0 ln switch01 server{10..25}\n";
			print "  $0 ln www server{10..20}\n";
			print "  $0 ln db server{21..25}\n";
			print "  $0 ln production server{18..23}\n";
		}
		print "\n";
		print "ls :: \n";
		print "  $0 ls <object> --data=n1[,n2...] [--intersection|-i]\n";
		print "  If you pass in the $poolDir/ then you get a view of all Pools. If you pass in the\n";
		print "  name(s) of Pool, you get all objects in that Pool or group of Pools. If you further\n";
		print "  pass --intersection (or -i) then you get only objects that are in all the Pools.\n";
		print "  If you pass --data=... then you get all data about each object returned.\n";
		if ($helpLength eq 'long') {
			print "Examples:\n";
			print "  $0 ls Assets\n";
			print "  $0 ls Pools/db\n";
			print "  $0 ls Pools/db/server02\n";
			print "  $0 ls Pools/db  Pools/www  Pools/dc01\n";
			print "  $0 ls --intersection production db\n";
			print "  $0 ls --data=name,ram,ip Pools/db\n";
			print "  $0 ls --data=name,ip,nic Pools/www\n";
		}
		print "\n";
		print "mv ::\n";
		print "  $0 mv <assetToMove> [<assetToMove>...] <destPool>\n";
		print "  Moves asset from one pool to another. Final argument is the destination pool for all\n";
		print "  arguments that precede it.\n";
		if ($helpLength eq 'long') {
			print "Examples:\n";
			print "  $0 mv Pools/db/server02 Pools/www\n";
		}
		print "\n";
		print "rm :: \n";
		print "  $0 rm <firstAsset> [secondAsset...]\n";
		print "  Remove an asset from the system and all pools it's in.\n";
		if ($helpLength eq 'long') {
			print "Examples:\n";
			print "  $0 rm server13\n";
		}
		print "\n";
		print "rename :: \n";
		print "  $0 rename <assetOldName> <assetNewName>\n";
		print "  Rename an Asset from one name to another, reflecting the change in all Pools.\n";
		if ($helpLength eq 'long') {
			print "Examples:\n";
			print "  $0 rename server02 websrv02\n";
		}
	}
}

# touch a file - don't shell out, cuz it'll interpret shell metachars
# which I really don't want - stolen from computer-programming-forum.com
sub touchFile {
	my $fileName = shift;

	my $now = time;
	local (*TMP);

	utime ($now, $now, $fileName)
	|| open (TMP, ">>$fileName")
	|| warn ("Couldn't touch file: $!\n");
}

# put an alphabetical list of data attributes into .dataList
# to help Git with conflicts and conflict resolution
sub updateKeepFile {
	my $assetName = shift;

	system ("ls -1 $assetDir/$assetName > $assetDir/$assetName/.dataList");
}

# return a list of entries in a dir - examples:
#   fileList ("/a/directory") - all entries
#   fileList ("/a/directory", '.') - all entries, same as previous ('.' is default)
#   fileList ("/a/directory", '^pre.+\.ext$') - all entries of form pre*.ext
# dotfiles are NOT shown unless explicitly asked for:
#   fileList ("dir/name", "^\..+")
sub fileList {
	my $dirName = shift;
	my $matchExp = shift || ".";

	my $dirHandle;
	my $fileList;

	# if they gave us a file instead of dir, just return
	unless (-d $dirName) {
		if ($verbose) { print STDERR " W $dirName isn't a directory. fileList() returns empty array.\n"; }
		return [ ];
	}

	if (opendir my($dirHandle), $dirName) {
		@{$fileList} = grep { /$matchExp/ } readdir ($dirHandle);
		closedir ($dirHandle);

		# if they didn't explicitly ask for dotfiles, don't return them
		if ($matchExp eq '.' || $matchExp !~ /^\./) {
			@{$fileList} = grep { !/^\./ } @{$fileList};
		}

		return $fileList;
	} else {
		if ($verbose) { print STDERR " E Could not open $dirName for reading!\n"; }
		return [ ];
	}
}

# add a data key/val to an asset, if confused, return 250
sub addDataToAsset {
	my $assetName = shift;
	my $dataKeyVal = shift;

	if ($verbose) { print STDERR " - Adding $dataKeyVal for $assetName\n"; }

	# replace any / with \
	$dataKeyVal =~ s/\//\\/g;

	if ($dataKeyVal =~ /^(.+?):(.+)$/) {
		my $key = $1;
		my $val = $2;

		# remove the key if it already exists
		my $existingKeys = `find $assetDir/$assetName/$key:* 2>/dev/null`;
		if ($existingKeys) {
			if ($verbose) { print STDERR " - Removing old keys $key for $assetName\n"; }
			system ("rm -f $assetDir/$assetName/$key*");
		}

		touchFile ("$assetDir/$assetName/$dataKeyVal");
		updateKeepFile ($assetName);
	} else {
		print STDERR " E Could not parse $dataKeyVal into key/value pair!\n";
		return 250;
	}
}

# collect the data key/value from the asset - if none, return undef
sub getDataFromAsset {
	my $asset = shift;
	my $dataKey = shift;

	# if they don't want a particular key, give them all
	unless (defined $dataKey) {
		$dataKey = '.+';
	}

	# get all matching data keys and deal with slash problem
	my $dataList = fileList ("$assetDir/$asset", "^$dataKey:");

	# normally you do this:
	#   @newList = map {...} @oldList
	# but since I'm doing s/a/b/ I am actually modifying @oldList!
	map { s/\\/\//g } @{$dataList};

	return $dataList;
}

# add assets to the database
sub addAssets {
	my $actionTaken = "Added new";

	foreach my $asset (@extraArgs) {
		# make the dir for the asset to store its data
		if (-d "$assetDir/$asset") {
			$actionTaken = "Modified existing";
		} else {
			system ("mkdir -p $assetDir/$asset");
			touchFile ("$assetDir/$asset/.dataList");
		}

		# put in each data key:value pair
		foreach my $data (split(/,/, $dataList)) {
			my ($key, $val);
			if ($data =~ /^(.+?):(.+)$/) {
				$key = $1;
				$val = $2;
			}

			# create the new key
			addDataToAsset ($asset, $data);
		}

		print " - $actionTaken Asset $asset\n";

		# TODO: use facter or something real - this will only work for Linux boxes
		if ($collectURI) {
			print " - Collecting information about $asset via SSH from $collectURI...\n";
			if ($verbose) { print STDERR "   - Collecting network\n"; }

			my $collectHost;
			my $collectUser;
			if ($collectURI =~ /^(.+?)@(.+)$/) {
				$collectUser = $1;
				$collectHost = $2;
			} else {
				$collectUser = '';
				$collectHost = $collectURI;
			}

			my $ifConfig = `ssh $collectURI "/sbin/ifconfig"`;
			my $intIP = 0;
			my $ifaceName = 0;
			my $ifaceHWaddr = 0;
			my $ifaceInetAddr = 0;
			my $ifaceInet6Addr = 0;
			foreach my $iFace (split /\n\n/, $ifConfig) {
				if ($iFace =~ /^(.+?)\s+/s) {
					$ifaceName = $1;
				}
				if ($iFace =~ /HWaddr\s+([0-9a-f:]+)\s+/s) {
					$ifaceHWaddr = $1;
					addDataToAsset ($asset, "$ifaceName-hwaddr:$ifaceHWaddr");
				}
				if ($iFace =~ /inet addr:\s*([0-9\.]+)\s+/s) {
					$ifaceInetAddr = $1;
					addDataToAsset ($asset, "$ifaceName-inet:$ifaceInetAddr");
				}
				if ($iFace =~ /inet6 addr:\s*([0-9a-f\:\/]+)\s+/s) {
					$ifaceInet6Addr = $1;
					if ($verbose) { print STDERR " - Inet6 is $ifaceInet6Addr\n"; }
					addDataToAsset ($asset, "$ifaceName-inet6:$ifaceInet6Addr");
				}
				if ($ifaceInetAddr =~ /^192\.168\./ || $ifaceInetAddr =~ /^10\./ || $ifaceInetAddr =~ /172\.1[6-9]\./ || $ifaceInetAddr =~ /172\.2[0-9]\./ || $ifaceInetAddr =~ /172\.3[0-1]\./) {
					$intIP = $ifaceInetAddr;
					addDataToAsset ($asset, "intip:$intIP");
				}
			}

			if ($verbose) { print STDERR "   - Collecting extIP\n"; }
			my $extIP=`host -t a $collectHost`;
			if ($extIP =~ /has address (.+)$/) {
				$extIP = $1;
			} else {
				$extIP = 'UNKNOWN';
			}

			if ($verbose) { print STDERR "   - Collecting CPUcount\n"; }
			my $cpuCount = `ssh $collectURI "cat /proc/cpuinfo | grep ^processor | wc -l"`;
			chomp ($cpuCount);

			if ($verbose) { print STDERR "   - Collecting Memory\n"; }
			my $memory = 0;
			my $memUnits = "?";
			my $memInfo = `ssh $collectURI "cat /proc/meminfo | grep ^MemTotal"`;
			if ($memInfo =~ /(\d+)\s+(\w+)$/) {
				$memory = $1;
				$memUnits = $2;
			}

			# if we collected a piece of data, put it into the asset
			if ($extIP)    { addDataToAsset ($asset, "ip:$extIP"); }
			if ($cpuCount) { addDataToAsset ($asset, "cpus:$cpuCount"); }
			if ($memory)   { addDataToAsset ($asset, "mem$memUnits:$memory"); }
		}

		# update the git helper file
		updateKeepFile ($asset);
	}
}

sub rmAssets {
	foreach my $asset (@extraArgs) {
		# we need only the asset name, no path info
		if ($asset =~ /\/(.+)$/) {
			$asset = $1;
		}
		if ($verbose) { print STDERR " + Removing $asset from Assets $assetDir...\n"; }
		system ("find $assetDir -name '$asset' -exec rm -rf {} \\; 2>/dev/null");
		if ($verbose) { print STDERR " + Removing $asset from Pools $poolDir...\n"; }
		system ("find $poolDir -name '$asset' -exec rm -rf {} \\; 2>/dev/null");
		print " - Removed $asset from system.\n";
	}
}

# move an asset from one pool to another
sub mvAssets {
	my $numMvArgs = scalar @extraArgs;
	my $destPool = $extraArgs[$numMvArgs - 1];
	$destPool =~ s/\/$//g;

	foreach my $assetToMove (@extraArgs) {
		# these are symlinks we're moving around, if there's a trailing slash,
		# then GNU mv will hate on us
		$assetToMove =~ s/\/$//g;

		if (-d $assetToMove && -d $destPool && $assetToMove ne $destPool) {
			system ("mv $assetToMove $destPool");
			print " - Moved Asset $assetToMove --> $destPool\n";
		}
	}
}

# simply connect assets to each other
sub lnAssets {
	if (scalar @extraArgs > 1) {
		my $parentAsset = shift (@extraArgs);

		# if they prefixed the parentAsset with Pools/, remove that bit
		if ($parentAsset =~ /^(.*$poolDir\/)(.+)$/) {
			$parentAsset = $2;
		}

		# all these are linkees
		foreach my $childAsset (@extraArgs) {
			# every pool should also be an asset so it can have data
			system ("mkdir -p $poolDir/$parentAsset/$childAsset");
			touchFile ("$poolDir/$parentAsset/$childAsset/.dataList");
			print " - Connected $parentAsset --> $childAsset\n";
		}
	} else {
		print STDERR " E Error: You must provide a list of assets to connect.\n";
	}
}

# simple list of what assets are in what - also applies to pools
# if a given Pools/X contains an asset Y, and Pools/Y exists,
# then Pools/Y is a child of Pools/X
sub listAssets {
	# no args at all? list all pools.
	if (!scalar @extraArgs) {
		@extraArgs = @{fileList ($poolDir)};

		my $buildUnassignedAssets = fileList ($assetDir);
		if (scalar @{$buildUnassignedAssets}) {
			foreach my $oneAsset (@{$buildUnassignedAssets}) {
				$unassignedAssets->{$oneAsset} = 1;
			}
		} else {
			print STDERR " E No Assets in directory $assetDir/\n";
			exit 252;
		}
	}

	# major modes:
	#  - output a view of all the Pools/Assets.
	#  - output an Edge/Node view

	#  - output an Edge/Node view
	if ($edgeNodeMode) {
		outputEdgesNodes();
		return 0;
	}

	#  - output a view of all the Pools/Assets.
	my $reportHash = getAssetHash();
	# output the hash
	outputHashTree ($reportHash);
	return 0;
}

# output the list of Pools and Assets in Edge/Node format for easy graphing
sub outputEdgesNodes {
	my $edgeIndex = 0;
	my $nodeIndex = 0;
	my $nodeList;
	my $nodeLookup;
	my $edgeList;

	# if no Pools were specified, get them all
	if ($extraArgs[0] =~ /^$poolDir\/*$/) {
		@extraArgs = @{fileList ("$poolDir")};
	}
	if ($verbose) { print STDERR " - Building Node/Edge JSON for " . scalar @extraArgs . " pools.\n"; }

	# get all assets from the pools they specified
	my $assetList = collectAssetList();

	# every Pool specified on commandline is a Node
	foreach my $pool (@extraArgs) {
		$nodeLookup->{$pool}->{index} = $nodeIndex;
		$nodeLookup->{$pool}->{type} = 'Pool';
		$nodeLookup->{$pool}->{group} = 1;
		$nodeList->[$nodeIndex] = $pool;
		$nodeIndex++;
	}

	# every Asset found from collectAssetList is a Node
	foreach my $asset (@{$assetList}) {
		unless ($nodeLookup->{$asset}->{index}) {
			$nodeLookup->{$asset}->{index} = $nodeIndex;
			$nodeLookup->{$asset}->{type} = 'Asset';
			$nodeLookup->{$asset}->{group} = 2;
			$nodeList->[$nodeIndex] = $asset;
			$nodeIndex++;
		}
	}

	# every Asset/Pool inside a Pool creates an Edge
	foreach my $pool (@extraArgs) {
		if ($verbose) { print STDERR " - Building Edge list for $pool\n"; }
		foreach my $asset (@{fileList ("$poolDir/$pool")}) {
			if ($nodeLookup->{$asset}->{index} && -d "$poolDir/$pool/$asset") {
				# TODO: Collect weight/type/direction from poolDir/pool/asset/... set of attributes
				$edgeList->{$edgeIndex}->{weight} = 5;
				$edgeList->{$edgeIndex}->{type} = 'Generic';
				$edgeList->{$edgeIndex}->{direction} = 0;
				if (defined $nodeLookup->{$pool}->{index}) {
					$edgeList->{$edgeIndex}->{left} = $nodeLookup->{$pool}->{index};
				} else {
					if ($verbose) { print "Undefined edge?! pool=$pool, edgeIndex=$edgeIndex\n"; }
				}
				if (defined $nodeLookup->{$asset}->{index}) {
					$edgeList->{$edgeIndex}->{right} = $nodeLookup->{$asset}->{index};
				} else {
					if ($verbose) { print "Undefined edge?! asset=$asset, edgeIndex=$edgeIndex\n"; }
				}
				$edgeIndex++;
			}
		}
	}

	# output a JSON of nodes/edges
	my $commaOutput=0;
	print qq#{\n\  "nodes":[\n#;
	for (my $i=0; $i < $nodeIndex; $i++) {
		if ($commaOutput++) {
			print "   ,";
		} else {
			print "    ";
		}
		print qq#{ "name":"$nodeList->[$i]", "group":$nodeLookup->{$nodeList->[$i]}->{group} }\n#;
	}
	$commaOutput=0;
	print qq#  ]\n ,"links":[\n#;
	for (my $i=0; $i < $edgeIndex; $i++) {
		if ($commaOutput++) {
			print "   ,";
		} else {
			print "    ";
		}
		print qq#{ "source":$edgeList->{$i}->{left}, "target":$edgeList->{$i}->{right}, "value":$edgeList->{$i}->{weight} }\n#;
	}
	print qq#  ]\n}\n#;
}

# based on the objects listed in @extraArgs, make an array of assets in the
# pools that list represents - TODO: merge with getAssetHash so vennMode logic
# won't be split across two places?
sub collectAssetList {
	my $assetList;
	my $assetHash;
	my $runNum = 0;

	foreach my $listDest (@extraArgs) {
		if ($listDest =~ /$assetDir\/(.+)$/) {
			if ($verbose) { print STDERR " - Got asset $1 - merely adding it to hash.\n"; }
			$assetHash->{$1} = 1;
		} else {
			if ($verbose) { print STDERR " - Traversing $listDest\n"; }

			my @assetsFound;
			if (-d $listDest) {
				# if they pass an actual dir that exists
				@assetsFound = @{fileList ("$listDest")};
			} elsif (-d "$poolDir/$listDest") {
				# pool name sans dir prefix
				@assetsFound = @{fileList ("$poolDir/$listDest")};
			} elsif (-d "$assetDir/$listDest") {
				# they passed an asset name sans dir prefix
				$assetHash->{$listDest} = 1;
			}

			# here we decide if we're doing the intersection of the various pools
			if ($vennMode eq 'intersection') {
				my @interSection;

				# initial run, fill asset list, otherwise, do intersection
				foreach my $foundAsset (@assetsFound) {
					if ($runNum > 0) {
						# time to do intersection!
						if (defined $assetHash->{$foundAsset}) {
							push (@interSection, $foundAsset);
						}
					} else {
						# fill initial asset list
						push (@interSection, $foundAsset);
					}
				}

				if ($verbose) { print STDERR " - Adding " . scalar @interSection . " items in this round.\n"; }
				$assetHash = undef;
				foreach my $foundAsset (@interSection) {
					$assetHash->{$foundAsset} = 1;
				}
			} else {
				# do they want all assets or just an intersection from the pools?
				foreach my $foundAsset (@assetsFound) {
					if ($verbose) { print STDERR " - Adding $foundAsset from $listDest\n"; }
					$assetHash->{$foundAsset} = 1;
				}
			}

			$runNum++;
		}
	}

	@{$assetList} = sort keys %{$assetHash};
	return $assetList;
}

sub getAssetHash {
	my $reportHash;
	my $currRecurseLevel = $recurseLevel;

	# collect Pool names from @extraArgs, some of which might be children of
	# others
	my $poolList;
	my @assetsToShow;

	# put the list of top-level Pools in an array and as base of reportHash
	foreach my $onePool (@extraArgs) {
		if (-d "$poolDir/$onePool") {
			push (@{$poolList}, $onePool);
			$reportHash->{$onePool}->{parent} = $topLevel;
		} elsif (-d "$assetDir/$onePool") {
			# ah, this is an Asset, not a Pool...
			if ($verbose) { print STDERR " - $onePool is Asset - not setting top-level Pool\n"; }
			push (@{$poolList}, $onePool);
			$reportHash->{$onePool}->{parent} = 0;
		}
	}

	if (scalar keys %{$reportHash}) {
		# keep following Pools within Pools until we hit the base case
		# on recursion level
		while ($currRecurseLevel-- > 0) {
			foreach my $onePool (keys $reportHash) {
				foreach my $oneDeeperEntry (@{fileList ("$poolDir/$onePool")}) {
					if (-d "$poolDir/$oneDeeperEntry") {
						push (@{$poolList}, $oneDeeperEntry);
						$reportHash->{$oneDeeperEntry}->{parent} = $topLevel;
					}
				}
			}
		}

		# second collect all assets inside the top-level pool names and if they
		# match top-level pool, create link between them in the hash
		foreach my $currPool (@{$poolList}) {
			if ($verbose) { print STDERR " - Pool $currPool getting members\n"; }
			# since there might be duplicate Pool in the poolList, we move on if
			# we've already processed this Pool before
			next if (defined $reportHash->{$currPool}->{children} && scalar @{$reportHash->{$currPool}->{children}});

			# now collect a list of Assets inside the Pool
			my @assetList;
			if (-d "$poolDir/$currPool") {
				@assetList = @{fileList ("$poolDir/$currPool")};
			} else {
				if ($verbose) { print STDERR " - $currPool is not Pool - adding only self into assetList\n"; }
				push (@assetList, $currPool);
			}

			foreach my $oneAsset (sort @assetList) {
				delete $unassignedAssets->{$oneAsset};

				# if we're outputting data, we don't want spurious non-Asset
				# entries in the report
				next if ($dataList && ! -d "$assetDir/$oneAsset");

				# if it's not already a top-level pool, make its parent the current one
				unless (defined $reportHash->{$oneAsset}->{parent}) { $reportHash->{$oneAsset}->{parent} = $currPool; }

				$reportHash->{$oneAsset}->{poolCount}++;
				push (@{$reportHash->{$currPool}->{children}}, "$oneAsset");

				if (-d "$assetDir/$oneAsset") {
					# if it's an actual Asset, collect its info
					if ($verbose) { print STDERR " - Pool $currPool -> $oneAsset - adding attributes:"; }
					foreach my $oneAttr (@{getDataFromAsset ($oneAsset)}) {
						if ($verbose) { print STDERR "."; }
						if ($oneAttr =~ /^(.+?):(.+)$/) {
							my $dataName = $1;
							my $dataVal = $2;

							# if this data matches the list they want, put into report
							if ($dataList eq '*' || $dataList =~ /\b$dataName\b/) {
								if (!$pristineMode && $dataVal =~ /^(\d+)$/) {
									$dataVal = addCommas($dataVal);
								}
								$reportHash->{$oneAsset}->{attrs}->{$dataName} = $dataVal;
							}
						}
					}
					if ($verbose) { print STDERR "\n"; }
				}
			}
		}

		# build a list of assets that didn't show up in any pools
		foreach my $oneAsset (keys %{$unassignedAssets}) {
			push (@{$reportHash->{'00-UNLINKED-ASSETS'}->{children}}, "$oneAsset");
		}
	} else {
        print " + Cannot locate Pools [@extraArgs].\n";
		exit 248;
	}


	return ($reportHash);
}

# traverse a tree struct implemented inside a hash
sub outputHashTree {
	my $hashToTraverse = shift;
	my $indent = shift;
	my $reportRows = 0;

	if ($outputMode eq 'json') {
		print "{\n";
	}

	if ($vennMode eq 'intersection') {
		my $poolName = '';
		foreach my $parentKey (sort keys %{$hashToTraverse}) {
			if ($hashToTraverse->{$parentKey}->{parent} eq $topLevel) {
				$poolName .= "+$parentKey";
			}
		}
		$poolName =~ s/^\+//;
		if (-t STDOUT && $outputMode eq 'ascii') {
			if ($colourisedOutput) { print "$poolColour"; }
			print "($poolName)";
			if ($dataList) { print "\n"; }
			if ($colourisedOutput) { print "$regularColour"; }
		} elsif ($outputMode eq 'json') {
			print "  \"$poolName\":";
		}
	}
	foreach my $parentKey (sort keys %{$hashToTraverse}) {
		# if this is a top-level node of the hash it's a Pool, otherwise it's
		# an Asset
		if (scalar $hashToTraverse->{$parentKey}->{children}) {
			if ($reportRows++) {
				if ($outputMode eq 'json') {
					print ',';
				}
			} else {
				if ($outputMode eq 'json') {
					print ' ';
				}
			}

			# print the parent - but only if STDOUT report
			if (-t STDOUT && $outputMode eq 'ascii' && $vennMode ne 'intersection') {
				if ($colourisedOutput) { print $poolColour; }
				print "($parentKey)";
				if ($colourisedOutput) { print $regularColour; }
				if ($dataList) {
					print "\n";
				}
			} elsif ($outputMode eq 'json' && $vennMode ne 'intersection') {
				print " \"$parentKey\":";
			}

			if ($dataList) {
				printAssetsAttributes ($parentKey, $hashToTraverse);
			} else {
				printPoolPlusAssetGraphic ($parentKey, $hashToTraverse);
			}

			if ($vennMode eq 'intersection') {
				# in vennMode intersection, only output a single Pool, the
				# Asset printing will only print Assets that appeared in all
				# pools
				last;
			}
		}
	}

	if ($outputMode eq 'json') {
		print "}\n";
	}

	# if they're in a terminal, tell them how many matching Pools. if they're piping
	# then skip that. it'll just confuse things.
	if (-t STDOUT) {
		if ($colourisedOutput) { print STDERR $summaryColour; }
		print STDERR " - $reportRows pools.\n";
		if ($colourisedOutput) { print STDERR $regularColour; }
	}
}

sub printPoolPlusAssetGraphic {
	my $parentKey = shift;
	my $attrHash = shift;

	# if we have some Pools/Assets children then we indicate such
	if (defined $attrHash->{$parentKey}->{children}) {
		if ($outputMode eq 'ascii') {
			print " --> ";
		} elsif ($outputMode eq 'json') {
			print ":[\n";
		}

		# build an output string
		my $outputString = '';
		if (scalar @{$attrHash->{$parentKey}->{children}}) {
			if ($outputMode eq 'ascii') {
				foreach my $oneObject (@{$attrHash->{$parentKey}->{children}}) {
					# only output objects in all Pools if intersection
					next if ($vennMode eq 'intersection' && $attrHash->{$oneObject}->{poolCount} < scalar @extraArgs);

					# Pools have different output characteristics and go
					# at the start, so we must do two loops
					if ($verbose) { print STDERR " - Testing if $poolDir/$oneObject exists and is thus a Pool\n"; }
					if (-d "$poolDir/$oneObject") {
						if ($colourisedOutput) { $outputString .= $poolColour; }
						if ($longMode) {
							$outputString .= "($oneObject) ";
						} else {
							$outputString .= "() ";
						}
					}
				}
				foreach my $oneObject (@{$attrHash->{$parentKey}->{children}}) {
					# only output objects in all Pools if intersection
					next if ($vennMode eq 'intersection' && $attrHash->{$oneObject}->{poolCount} < scalar @extraArgs);

					# Assets get printed after Pools
					unless (-d "$poolDir/$oneObject") {
						if ($colourisedOutput) { $outputString .= $assetColour; }
						if ($longMode) {
							$outputString .= "$oneObject ";
						} else {
							$outputString .= "+";
						}
					}
				}
			} else {
				my $reportRow = 0;
				foreach my $oneObject (@{$attrHash->{$parentKey}->{children}}) {
					# only output objects in all Pools if intersection
					next if ($vennMode eq 'intersection' && $attrHash->{$oneObject}->{poolCount} < scalar @extraArgs);

					$outputString .= "    ";
					if ($reportRow++) { $outputString .= ", "; } else { $outputString .= "  "; }
					$outputString .= "{ \"name\":\"$oneObject\" }\n";
				}
			}
		}

		# get rid of extraneous comma at end
		$outputString =~ s/, $//;
		print $outputString;

		if ($outputMode eq 'json') {
			print "  ]\n";
		} else {
			print "\n";
		}

		if ($colourisedOutput) { print $regularColour; }
	} else {
		# this is an Asset with no further children
		print "\n";
	}
}

# output a simple list of Assets and their data attributes
sub printAssetsAttributes {
	my $keyToShow = shift;
	my $attrHash = shift;
	my $outputCol = 0;

	# for JSON mode, output an array
	if ($outputMode eq 'json') {
		print "[\n";
	}

	# each Asset and their Data attributes...
	my $reportRows = 0;
	if ($verbose) { print STDERR " - Doing children of $keyToShow\n"; }
	foreach my $assetName (@{$attrHash->{$keyToShow}->{children}}) {
		my $outLine = '';

		next if ($vennMode eq 'intersection' && $attrHash->{$assetName}->{poolCount} < scalar @extraArgs);

		# if it's an Asset/, print it as asset color and if long output with a
		# preceding +. If it's a Pool/, print it pool color with a () preceding.
		if (-d "$poolDir/$assetName" && $dataList =~ /\bname\b/) {
			if ($colourisedOutput) { $outLine .= $poolColour; }
			if ($longMode) { $outLine .= "() "; }
			if ($colourisedOutput) { $outLine .= $regularColour; }
		} elsif ($dataList eq '*' || $dataList =~ /\bname\b/) {
			if ($colourisedOutput) { $outLine .= $assetColour; }
			if ($longMode) { $outLine .= " + "; }
			if ($colourisedOutput) { $outLine .= $regularColour; }
		}

		# each Data attribute they requested...
		foreach my $dataName (split(/,/, $dataList)) {
			# separate columns after 1st with tabs
			if ($outputMode eq 'ascii') {
				if ($outputCol) { $outLine .= "\t"; }
			} elsif ($outputMode eq 'json') {
				unless ($outputCol) {
					if ($reportRows) {
						$outLine .= "  , ";
					} else {
						$outLine .= "    ";
					}
					$outLine .= "{ ";
				}
			}

			if ($dataName eq 'name') {
				# the column 'name' is special
				if (-d "$poolDir/$assetName" && $colourisedOutput) {
					$outLine .= $poolColour;
				} elsif ($colourisedOutput) {
					$outLine .= $assetColour;
				}
				if ($outputMode eq 'ascii') {
					$outLine .= "$assetName";
				} elsif ($outputMode eq 'json') {
					$outLine .= "\"name\":\"$assetName\", ";
				}
				$outputCol++;
			} elsif ($dataName eq 'pools') {
				# the column 'pools' is also special
				my $poolList = '';
				my $poolFind = `find $poolDir -name '$assetName'`;
				foreach my $onePoolDir (split (/\n/, $poolFind)) {
					if ($onePoolDir =~ /.+\/(.+)\/(.+)$/) {
						$poolList .= "$1,";
					}
				}
				$poolList =~ s/,$//;
				$outLine .= $poolList;
			} else {
				if ($colourisedOutput) { $outLine .= $dataColour; }

				if ($dataName eq '*') {
					if ($outputMode eq 'ascii') {
						$outLine .= "name:$assetName\t";
					} elsif ($outputMode eq 'json') {
						$outLine .= "\"name\":\"$assetName\", ";
					}
					foreach my $key (sort keys %{$attrHash->{$assetName}->{attrs}}) {
						if ($outputMode eq 'ascii') {
							if ($colourisedOutput) { $outLine .= $regularColour; }
							$outLine .= "$key:";
							if ($colourisedOutput) { $outLine .= $dataColour; }
							$outLine .= $attrHash->{$assetName}->{attrs}->{$key} . "\t";
							if ($colourisedOutput) { $outLine .= $regularColour; }
						} elsif ($outputMode eq 'json') {
							$outLine .= "\"$key\":\"$attrHash->{$assetName}->{attrs}->{$key}\", ";
						}
					}
				} elsif ($dataName =~ /^"(.+?)"$/) {
					if ($outputMode eq 'ascii') {
						$outLine .= $1;
					} elsif ($outputMode eq 'json') {
						$outLine .= "\"$1\":\"$1\", ";
					}
				} elsif (defined $attrHash->{$assetName}->{attrs}->{$dataName}) {
					if ($outputMode eq 'ascii') {
						$outLine .= $attrHash->{$assetName}->{attrs}->{$dataName};
					} elsif ($outputMode eq 'json') {
						$outLine .= "\"$dataName\":\"$attrHash->{$assetName}->{attrs}->{$dataName}\", ";
					}
				} else {
					if ($outputMode eq 'ascii') {
						$outLine .= "__UNDEF__";
					} else {
						$outLine .= "\"$dataName\":UNDEF, ";
					}
				}
				$outputCol++;
			}
		}

		# fix up any retardation if JSON output
		if ($outputMode eq 'json') {
			$outLine =~ s/, $/ /;
		}

		# put terminal back into normal mode
		if ($colourisedOutput) { $outLine .= $regularColour; }

		# newline! :)
		if ($outputMode eq 'ascii') {
			$outLine .= "\n";
		} elsif ($outputMode eq 'json') {
			$outLine .= "}\n";
		}
		$reportRows++;
		$outputCol = 0;

		# finally, output the line
		print $outLine;
	}

	# close the JSON array
	if ($outputMode eq 'json') {
		print "  ]\n";
	}

	# if they're in a terminal, tell them how many matching assets. if they're piping
	# then skip that. it'll just confuse things.
	if ($outputMode eq 'ascii' && -t STDOUT) {
		if ($colourisedOutput) { print STDERR $summaryColour; }
		print STDERR " - $reportRows assets in pool.\n";
		if ($colourisedOutput) { print STDERR $regularColour; }
	}
}

sub renameAssets {
	my $assetToRename = shift (@extraArgs);
	my $assetNewName = shift (@extraArgs);

	# sanity check their input
	if ($assetToRename =~ /\//) {
		print STDERR " E You should only give the bare asset name without any pool prefixes.\n";
		return 255;
	}

	if ($verbose) { print STDERR " - Locating all Pool objects linking to $assetDir/$assetToRename\n"; }
	my $fileSystemNamesToRename = `find $poolDir $assetDir -name $assetToRename`;

	# first rename the asset itself
	if (-e "$assetDir/$assetNewName") {
		print STDERR " - Cowardly refusing to overwrite $assetDir/$assetNewName.\n";
		print STDERR " - Aborting procedure! Remove Asset $assetNewName from system\n";
		print STDERR "   before renaming something to it.\n";
		return 251;
	} else {
		if ($verbose) { print STDERR " - Moving $assetDir/$assetToRename --> $assetDir/$assetNewName\n"; }
		system ("mv $assetDir/$assetToRename $assetDir/$assetNewName");
	}

	$fileSystemNamesToRename =~ s/\/$assetToRename//gs;
	my @assetLocations = split (/\n/, $fileSystemNamesToRename);

	foreach my $linkLoc (@assetLocations) {
		# because of pools-in-pools it can happen that a previous
		# re-ln already did this. so just don't do the work twice
		# but don't abort the procedure.
		unless (-e "$linkLoc/$assetNewName") {
			if ($verbose) { print STDERR " - Linking $assetDir/$assetNewName into $linkLoc and removing $assetToRename\n"; }
			system ("cd $linkLoc && mv $assetToRename $assetNewName");
		}
	}

	print " - Renamed $assetToRename --> $assetNewName\n";
}

# make a number filled with commas - humans hate to see a number like
# 57106739592. It's really confusing.
sub addCommas {
	my $theNumber = shift;
	$theNumber = reverse $theNumber;
	$theNumber =~ s<(\d\d\d)(?=\d)(?!\d*\.)><$1,>g;
	return reverse $theNumber;
}

