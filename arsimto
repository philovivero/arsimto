#!/usr/bin/perl
# vim: set noexpandtab:
# --
# A recent battle with vim and a Go program finally settled this for me.
# Tabs for indent, spaces for formatting. If you change your shiftwidth and
# tabstop to different values and your code looks ugly, say aloud: tabs
# for indent, spaces for formatting.
# --
# arsimto is a radically-simple inventory management tool.
# license: gpl v2.
# author: Tim Ellis, CTO Fifth Sigma, Inc.

use strict;
use warnings;

# things passed in via arguments
my $mode = 0;
my $verbose = 0;
my $assetList = '';
my $dataList = '';
my $collectMode = 0;
my @extraArgs;

# names of directories
my $poolDir = "Pools";
my $assetDir = "Assets";

# list of posible command sections
my $cmdList = "add, ln, ls, mv, rm, report";

# a constant meaning an entry is at the top of a tree
my $topLevel = '__TOP_LEVEL_NO_PARENT';
my $vennMode = 'union';

# no arguments passed in? long help.
unless (scalar @ARGV) {
	doArgs('long');
	exit 255;
}

# parse input arguments. put anything unparsed onto @extraArgs
foreach my $arg (@ARGV) {
	if ($arg =~ /^-+h(elp)*$/)                  { doArgs('short'); exit 0; }
	elsif ($arg =~ /^-+a(ssets)*=(.+)$/)        { $assetList = $2; }
	elsif ($arg =~ /^-+c(ollect)$/)             { $collectMode = 1; }
	elsif ($arg =~ /^-+d(ata)*=(.+)$/)          { $dataList = $2; }
	elsif ($arg =~ /^-+i(ntersection)$/)        { $vennMode = 'intersection'; }
	elsif ($arg =~ /^-+v(erbose)*$/)            { $verbose = 1; }
	elsif ($cmdList =~ /\b$arg\b/)              { $mode = $arg; }
	else { push (@extraArgs, $arg); }
}

# if they don't know what they're doing but tried something, help them
unless ($mode) {
	print STDERR "Commands: $cmdList. Use -h for short help or no arguments for long help.\n";
	exit 255;
}

# determine the mode they're requesting and do the needful
if ($mode eq 'add') {
	addAssets();
} elsif ($mode eq 'ln') {
	connectAssets();
} elsif ($mode eq 'ls') {
	listAssets();
} elsif ($mode eq 'mv') {
	mvAssets();
} elsif ($mode eq 'rm') {
	rmAssets();
} elsif ($mode eq 'report') {
	reportAssets();
}

exit 0;

# ----------------------------------------------------------------------------------------
# subroutines follow
# ----------------------------------------------------------------------------------------

# give help. either short and concise or long and verbose including a tutorial.
sub doArgs {
	my $helpLength = shift;

	print "usage: $0 [-v] [-h] <command>\n";
	print "  [--assets=<assetList>]\n";
	print "  [--data=<dataList>]\n";
	print "\n";
	print "  -h        Short version help\n";
	print "  -v        Verbose/debugging output\n";
	print "  <command> is one of $cmdList.\n";
	print "\n";
	print "add :: \n";
	print "  $0 add --assets=<assetName>[,<assetName>...]\n";
	print "    --data=n1:v1[,n2:v2,...,nN:vN] [--collect]\n";
	print "  Add asset into inventory. Data attributes are added to all assets listed.\n";
	print "  --collect uses SSH to get some basic data from the host.\n";
	if ($helpLength eq 'long') {
		print "Examples:\n";
		print "  $0 add --assets=dc01   --data=capacity:5000\n";
		print "  $0 add --assets=rack01   --data=U:48\n";
		print "  $0 add --assets=switch01 --data=ports:48\n";
		print "  $0 add --assets=server01,server02,server03 --data=ram:16GB,disk:2048GB,nic:10Gb\n";
		print "  $0 add --assets=server01 --data=ip:192.168.1.101\n";
		print "  $0 add --assets=server02 --data=ip:192.168.1.102\n";
		print "  $0 add --assets=server03 --data=ip:192.168.1.103\n";
	}
	print "\n";
	print "ln :: \n";
	print "  $0 ln --assets=<parentAsset>,<childAsset>[,<childAsset>...]\n";
	print "  Links one asset to another or a logical pool to an asset. If parentAsset\n";
	print "  doesn't exist in Assets/, it's a logical pool and is created. If childAsset is\n";
	print "  a pool already, it makes a parent/child relationship between the pools.\n";
	if ($helpLength eq 'long') {
		print "Examples:\n";
		print "  $0 ln --assets=dc01,rack01\n";
		print "  $0 ln --assets=rack01,switch01,server01,server02,server03\n";
		print "  $0 ln --assets=switch01,server01,server02,server03\n";
		print "  $0 ln --assets=www,server01\n";
		print "  $0 ln --assets=db,server02,server03\n";
	}
	print "\n";
	print "ls :: \n";
	print "  $0 ls <object>\n";
	print "  List all Pools in tree view or, if pool is given, the assets in it.\n";
	print "  There is no recursive list of all pools and assets in them since\n";
	print "  the pool 'hierarchy' isn't a true hierarchy.\n";
	if ($helpLength eq 'long') {
		print "Examples:\n";
		print "  $0 ls Assets\n";
		print "  $0 ls Pools/db\n";
		print "  $0 ls Pools/db/server02\n";
	}
	print "\n";
	print "report :: \n";
	print "  $0 report <object> --data=n1[,n2...]\n";
	print "  Generates a list of assets and their data. This is how tools should call\n";
	print "  arsimto to gather information about the inventory.\n";
	if ($helpLength eq 'long') {
		print "Examples:\n";
		print "  $0 report --data=ram,ip Pools/db\n";
		print "  $0 report --data=ip,nic Pools/www\n";
	}
	print "\n";
	print "mv ::\n";
	print "  $0 mv <assetToMove> <destPool>\n";
	print "  Moves asset from one pool to another.\n";
	if ($helpLength eq 'long') {
		print "Examples:\n";
		print "  $0 mv Pools/db/server02 Pools/www\n";
	}
	print "\n";
	print "rm :: \n";
	print "  $0 rm --assets=<firstAsset>[,secondAsset...]\n";
	print "  Remove an asset from the system and all pools it's in.\n";
	if ($helpLength eq 'long') {
		print "Examples:\n";
		print "  $0 rm --assets=server03\n";
	}
	print "\n";
	print "Concise help: 'arsimto -h'. Detailed help: 'arsimto' without arguments.\n";
}

# add assets to the database
sub addAssets {
	foreach my $asset (split(/,/, $assetList)) {
		print STDERR " + Adding asset $asset\n";

		# make the dir for the asset to store its data
		system ("mkdir -p $assetDir/$asset");

		# put in each data key:value pair
		foreach my $data (split(/,/, $dataList)) {
			system ("touch $assetDir/$asset/$data");
		}

		# TODO: use facter or something real
		# if they want us to collect some info automagically...
		if ($collectMode) {
			if ($verbose) { print STDERR " + Collecting intIP\n"; }

			my $ifConfig = `ssh $asset "ifconfig | grep addr:10"`;
			my $intIP = "Unknown";
			if ($ifConfig =~ /addr:(.+?)\s+/) {
				$intIP = $1;
			}

			if ($verbose) { print STDERR " + Collecting extIP\n"; }
			my $extIP=`ping -c 1 $asset | grep 'bytes of data' | awk -F '(' '{print \$2}' | awk -F ')' '{print \$1}'`;
			chomp ($extIP);

			if ($verbose) { print STDERR " + Collecting CPUcount\n"; }
			my $cpuCount = `ssh archive.or.aofk.net "cat /proc/cpuinfo | grep ^processor | wc -l"`;
			chomp ($cpuCount);

			if ($verbose) { print STDERR " + Collecting Memory\n"; }
			my $memory = "Unknown";
			my $memUnits = "?";
			my $memInfo = `ssh archive.or.aofk.net "cat /proc/meminfo | grep ^MemTotal"`;
			if ($memInfo =~ /(\d+)\s+(\w+)$/) {
				$memory = $1;
				$memUnits = $2;
			}

			system ("touch $assetDir/$asset/ip:$extIP");
			system ("touch $assetDir/$asset/intip:$intIP");
			system ("touch $assetDir/$asset/cpus:$cpuCount");
			system ("touch $assetDir/$asset/mem$memUnits:$memory");
		}
	}
}

sub rmAssets {
	foreach my $asset (split(/,/, $assetList)) {
		if ($verbose) { print STDERR " + Removing asset $asset\n"; }
		system ("find $assetDir -name '$asset' -exec rm -rf {} \\; 2>/dev/null");
		system ("find $poolDir -name '$asset' -exec rm -rf {} \\; 2>/dev/null");
		print " - Removed $asset from system.\n";
	}
}

# move an asset from one pool to another
sub mvAssets {
	my $assetToMove = shift(@extraArgs);
	my $destPool = shift(@extraArgs);

	# these are symlinks we're moving around, if there's a trailing slash,
	# then GNU mv will hate on us
	$assetToMove =~ s/\/$//g;
	$destPool =~ s/\/$//g;

	unless (-d $assetToMove && -d $destPool) {
		print STDERR " E You must specify an assetToMove and destPool that exist! I got $assetToMove and $destPool\n";
		exit 255;
	} else {
		system ("mv $assetToMove $destPool");
	}
}

# simply connect assets to each other
sub connectAssets {
	if ($assetList =~ /^(.+?),(.+)$/) {
		my $parentAsset = $1;
		my $childAssets = $2;

		foreach my $childAsset (split(/,/, $childAssets)) {
			if ($verbose) { print STDERR " + Connecting $parentAsset --> $childAsset\n"; }
			system ("mkdir -p $poolDir/$parentAsset && cd $poolDir/$parentAsset && if [ -d ../../$assetDir/$childAsset ] ; then ln -sf ../../$assetDir/$childAsset ./ ; fi ; if [ -d ../$childAsset ] ; then ln -sf ../$childAsset ./ ; fi");
		}
	} else {
		print STDERR " E Error: You must provide a list of assets to connect.\n";
	}
}

# simple list of what assets are in what - also applies to pools
# if a given Pools/X contains an asset Y, and Pools/Y exists,
# then Pools/Y is a child of Pools/X
sub listAssets {
	my $reportHash;
	my $poolHash;

	# First, build a hash of pools:
	#   reportHash->{datacenter01} = top
	#   reportHash->{switch01} = top
	#   reportHash->{db} = top
	#
	# Next, get assets in each:
	#   datacenter01 children = switch01
	#   switch01 children = server01..server03
	#   db children = server01
	#
	# Next, iterate through assets of a pool. if poolHash->{pool.childN}
	# exists, then pool.childN is a pool, thus:
	#   reportHash->{pool}->{children} = child01
	#   reportHash->{child01} = pool

	foreach my $listDest (@extraArgs) {
		if ($verbose) { print STDERR " - Traversing $listDest\n"; }

		# we're checking if they're checking top-level pools or some
		# deeply-nested object. deeply-nested ones we won't worry about
		# hierarchies
		if ($listDest =~ /^$poolDir\/*$/) {
			# first collect all top-level pool names, some of which might
			# be children of others
			my @poolList = split(/\n/, `ls -1 $listDest`);

			# put the list of top-level pools into the report hash...
			foreach my $currPool (@poolList) {
				$reportHash->{$currPool}->{'parent'} = $topLevel;
			}

			# second collect all assets inside the top-level pool names
			# and if they match top-level pool, create two-way link between
			# them in the hash
			foreach my $currPool (@poolList) {
				my @assetList = split(/\n/, `ls -1 $listDest/$currPool`);

				foreach my $oneAsset (@assetList) {
					if (defined $reportHash->{$oneAsset}) {
						if ($verbose) { print STDERR "   - setting $currPool --> $oneAsset parent/child\n"; }
						$reportHash->{$oneAsset}->{'parent'} = $currPool;
						$reportHash->{$currPool}->{'children'} .= "$oneAsset,";
					}
				}
			}

			# third, output the hash
			outputHashTree ($reportHash, $topLevel, 0);
		} else {
			system ("ls -1 $listDest");
		}
	}
}

# traverse a tree struct implemented inside a hash
sub outputHashTree {
	my $hashToTraverse = shift;
	my $rootLevel = shift;
	my $indent = shift;

	my $leadSpaces = '';
	for (my $i=0; $i < $indent; $i++) {
		$leadSpaces .= "  ";
	}
	$indent++;

	foreach my $parentKey (sort keys %{$hashToTraverse}) {
		if ($hashToTraverse->{$parentKey}->{'parent'} eq $rootLevel) {
			print "$leadSpaces$parentKey\n";
			if (defined $hashToTraverse->{$parentKey}->{'children'}) {
				outputHashTree ($hashToTraverse, $parentKey, $indent);
			}
		}
	}
}

# collect the data for every asset specified then dump it out
sub reportAssets {
	my $objectList = '';
	my $reportHash;

	# the default is to show stats about all servers in either
	if ($vennMode eq 'union') {
		# first collect all data of all assets in the pools specified
		foreach my $reportDest (@extraArgs) {
			$objectList .= `find -L $reportDest -type f -name '*:*'`;
		}
	} elsif ($vennMode eq 'intersection') {
		my $numArgs = scalar @extraArgs;
		my $assetsFound = `ls -1 @extraArgs | sort | uniq -c | sort -nr`;

		foreach my $oneLine (split(/\n/, $assetsFound)) {
			if ($oneLine =~ /^\s*(\d+)\s+(.+)$/) {
				my $countTimes = $1;
				my $assetName = $2;
				if ($countTimes >= $numArgs) {
					# add all data:data from the assets found
					#$objectList .= ...;
				}
			}
		}
		print STDERR " --intersection isn't supported yet.\n";
	}

	# next, grab out the data we want and put into a hash of assets
	foreach my $oneLine (split(/\n/, $objectList)) {
		if ($oneLine =~ /^.+\/(.+?)\/(.+?):(.+)$/) {
			my $assetName = $1;
			my $dataName = $2;
			my $dataVal = $3;

			# if this data matches the list they want, put into report
			if ($dataList =~ /\b$dataName\b/) {
				$reportHash->{$assetName}->{$dataName} = $dataVal;
			} else {
				$reportHash->{$assetName}->{$dataName} = "__O_GOD_UNFOUND__";
			}
		}
	}

	# output the report
	foreach my $assetName (sort keys %{$reportHash}) {
		print "$assetName";
		foreach my $dataName (split(/,/, $dataList)) {
			if (defined $reportHash->{$assetName}->{$dataName}) {
				print "\t" . $reportHash->{$assetName}->{$dataName};
			} else {
				print "\t__UNDEF__";
			}
		}
		print "\n";
	}
}

